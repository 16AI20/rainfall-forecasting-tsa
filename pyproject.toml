[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "ts-forecast"
version = "0.1.0"
description = "Modular deep-learning pipeline for multivariate time-series forecasting focused on rainfall prediction"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "TSA Project Team"}
]
keywords = ["time-series", "forecasting", "deep-learning", "pytorch", "lstm", "tcn", "deepar"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies - essential for basic functionality
dependencies = [
    # Core Deep Learning
    "torch==2.5.1",
    "torchvision==0.20.1",

    # Config & Experiment Management
    "hydra-core==1.3.2",
    "omegaconf==2.3.0",
    "PyYAML==6.0.2",
    "python-dotenv==1.1.0",

    # Data & ML Utilities
    "numpy==1.26.4",
    "pandas==2.2.3",
    "scikit-learn==1.7.0",
    "joblib==1.5.1",

    # Progress Bars
    "tqdm==4.67.1",

    # Optional stability helpers
    "setuptools>=65.5.1",
]

[project.optional-dependencies]
# Hyperparameter optimization dependencies
optimization = [
    "optuna==4.4.0",
]

# MLflow experiment tracking
tracking = [
    "mlflow==2.18.0",
]

# Visualization dependencies
visualization = [
    "matplotlib==3.10.0",
    "seaborn==0.13.2",
]

# Image processing (optional)
cv = [
    "opencv-python==4.11.0.86",
]

# Testing dependencies
test = [
    "pytest==8.4.1",
    "pytest-cov",
]

# Development dependencies (linting, formatting, etc.)
dev = [
    "pytest==8.4.1",
    "pytest-cov",
    "flake8",
    "black",
    "isort",
    "mypy",
    "pre-commit",
]

# All ML-related dependencies (common combination)
ml = [
    "optuna==4.4.0",
    "mlflow==2.18.0",
    "matplotlib==3.10.0",
    "seaborn==0.13.2",
]

# Complete installation with all features
all = [
    "optuna==4.4.0",
    "mlflow==2.18.0",
    "matplotlib==3.10.0",
    "seaborn==0.13.2",
    "opencv-python==4.11.0.86",
    "pytest==8.4.1",
    "pytest-cov",
    "flake8",
    "black",
    "isort",
    "mypy",
    "pre-commit",
]

[project.scripts]
# Convenient command-line scripts
ts-train = "src.pipeline:main"
ts-predict = "src.predict:main"

[project.urls]
Homepage = "https://github.com/your-org/TSA-Project"
Repository = "https://github.com/your-org/TSA-Project"
Issues = "https://github.com/your-org/TSA-Project/issues"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "seaborn.*",
    "cv2.*",
    "optuna.*",
    "mlflow.*",
    "hydra.*",
    "omegaconf.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]